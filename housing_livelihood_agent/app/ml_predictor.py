import os
import joblib
import pandas as pd
import logging
from typing import Dict, Any, Optional

# Configure logging
logger = logging.getLogger(__name__)

# --- Model Loading (Robust Pathing) ---
# Get the absolute path to the directory of the current script (app/)
APP_DIR = os.path.dirname(os.path.abspath(__file__))
# Go one level up to get the project's base directory (housing_livelihood_agent/)
BASE_DIR = os.path.dirname(APP_DIR)
# Construct the absolute path to the model file
MODEL_PATH = os.path.join(BASE_DIR, "relocation_model.pkl")

model_artifacts: Optional[Dict[str, Any]] = None

def load_model() -> None:
    """
    Loads the machine learning model and associated encoders from the .pkl file
    using a robust, absolute path.
    """
    global model_artifacts
    if os.path.exists(MODEL_PATH):
        try:
            model_artifacts = joblib.load(MODEL_PATH)
            logger.info(f"Successfully loaded ML model from {MODEL_PATH}.")
        except Exception as e:
            logger.error(f"Error loading model from {MODEL_PATH}: {e}")
            model_artifacts = None
    else:
        logger.warning(f"Model file not found at {MODEL_PATH}. ML functions will be disabled.")
        model_artifacts = None

# --- ML Scoring Logic ---
def score_plan(plan: Dict[str, Any]) -> float:
    """
    Scores the relocation plan generated by the LLM.
    """
    if model_artifacts is None:
        logger.warning("ML model not available. Returning default score.")
        return 0.5

    try:
        score = 0.5
        if plan.get("flood_risk_level") == "high":
            score += 0.3
        if plan.get("income_level") == "low":
            score += 0.1
        
        return min(1.0, round(score, 2))

    except Exception as e:
        logger.error(f"An error occurred during plan scoring: {e}")
        return 0.0
